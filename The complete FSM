module top_module (
    input clk,
    input reset,      // Synchronous reset
    input data,
    output shift_ena,
    output counting,
    input done_counting,
    output done,
    input ack );
    
    parameter 
    A = 4'H0,
    B = 4'H1,
    C = 4'H2,
    D = 4'H3,
    E1 = 4'H4,
    E2 = 4'H5,
    E3 = 4'H6,
    E4 = 4'H7,
    E5 = 4'H8,
    F  = 4'H9;
    
    reg [3:0] state,nstate;
    
    always @(*)begin //state transition
        case(state)
            A : begin
                nstate <= data? B : A;
            end
            B : begin
                nstate <= data? C : A;
            end
            C : begin
                nstate <= data? C : D;
            end
            D : begin
                nstate <= data? E1 : A;
            end
            E1 : begin
                nstate <= E2;
            end
            E2 : begin
                nstate <= E3;
            end
            E3 : begin
                nstate <= E4;
            end
            E4 : begin
                nstate <= E5;
            end
            E5 : begin
                nstate <= done_counting? F : E5;
            end
            F : begin
                nstate <= ack? A : F;
            end
        endcase
    end
    
    always @(posedge clk)begin //state FF
        if(reset)begin
            state <= A;
        end
        else begin
            state <= nstate;
        end
    end
    
    always @(*)begin  //output
        shift_ena = state == E1 || state == E2 || state == E3 || state == E4;
        counting = state == E5;
        done = state == F;
    end
            

endmodule
