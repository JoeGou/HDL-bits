As part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles 
whenever the proper bit pattern is detected. We handle sequence detection in Exams/review2015_fsmseq, so this portion of the FSM only handles enabling the shift register for 4 cycles.


module top_module (
    input clk,
    input reset,      // Synchronous reset
    output shift_ena);

    parameter
    A = 4'H0,
    B = 4'H1;
    reg [3:0] state,nstate,count;
    
    always @(*)begin   //state transition
        case(state)
            A : begin
                nstate <= count == 3 ? (reset? A : B) : A;
            end
            B : begin
                nstate <= reset? A : B;
            end
        endcase
    end
    
    always @(posedge clk)begin // counter
        if(reset || count == 4'H3)begin
            count <= 0;
        end else if(nstate == A)begin
            count <= count + 1'b1;
        end 
        else begin
            count <= 0;
        end
    end
    
    always @(posedge clk)begin //state FF
        if(reset)begin
            state <= A;
        end
        else begin
            state <= nstate;
        end
    end
    
    always @(*)begin  //output
        shift_ena = state == A;
    end
        
            
endmodule
